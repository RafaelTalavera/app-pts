package com.axiomasolucionesintegrales.app_pts.infrastructure.controllers;

import com.axiomasolucionesintegrales.app_pts.application.dto.UserDTO;
import com.axiomasolucionesintegrales.app_pts.domain.services.IUserService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class UserRestController {

    @Autowired
    private IUserService service;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @PreAuthorize("permitAll")
    @PostMapping
    public ResponseEntity<?> createUser(@RequestBody UserDTO data) {
        String password = data.getPassword().toLowerCase();
        if (service.existsByUsername(data.getUsername())) {
            return new ResponseEntity<>("Ya existe un usuario con este correo electrónico", HttpStatus.CONFLICT);
        }

        UserDTO userDTO = new UserDTO(
                null, // ID will be generated by the database
                data.getName(),
                data.getLastname(),
                data.getJob(),
                passwordEncoder.encode(password),
                data.getSignature(),
                data.getUsername(),
                data.getPhone(),
                data.getRole(),
                data.getCompany(),null
        );

        UserDTO createdUser = service.createUser(userDTO);

        return new ResponseEntity<>(createdUser, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDTO> updateUser(
            @PathVariable Long id,
            @RequestBody UserDTO userDTO) {

        userDTO.setId(id);
        userDTO.setPassword(passwordEncoder.encode(userDTO.getPassword()));

        UserDTO updatedUser = service.update(id, userDTO);
        return ResponseEntity.ok(updatedUser);
    }

    @GetMapping
    @PreAuthorize("permitAll")
    public ResponseEntity<List<UserDTO>> getAllUsers(HttpServletRequest request) {
        try {
            String token = request.getHeader("Authorization");
            System.out.println("Token recibido: " + token);

            String role = service.extractUserEmailFromToken(token);
            System.out.println("Rol extraído del token: " + role);

            if (!role.equals("ADMINISTRATOR")) {
                System.out.println("El usuario no tiene permisos de administrador.");
                return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
            }

            List<UserDTO> users = service.findAll();
            return ResponseEntity.ok(users);
        } catch (Exception e) {
            System.out.println("Error al procesar la solicitud: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMINISTRATOR')")
    public ResponseEntity<?> deleteUser(@PathVariable Long id) {
        try {
            service.deletedById(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            System.out.println("Error al eliminar el usuario: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
